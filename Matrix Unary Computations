
import numpy as np

# Section 1: Transpose of a Matrix and Symmetric Matrices

# Example 1: Transpose of a matrix
matrix_A = np.array([[1, 2, 3],
                     [4, 5, 6],
                     [7, 8, 9]])
transpose_A = matrix_A.T
print("Matrix A:\n", matrix_A)
print("\nTranspose of Matrix A:\n", transpose_A)

# Q2: Check if a matrix is symmetric
is_symmetric = (matrix_A == matrix_A.T).all()
print("\nIs Matrix A symmetric? ", is_symmetric)

# Practice Problem 1: Create a 4×4 random matrix and check if it is symmetric
random_matrix = np.random.randint(1, 10, (4, 4))
transpose_random = random_matrix.T
is_symmetric_random = (random_matrix == transpose_random).all()
print("Random Matrix:\n", random_matrix)
print("\nIs the random matrix symmetric? ", is_symmetric_random)

# Section 2: Trace of a Matrix

# Example: Trace of matrix_A
trace_A = np.trace(matrix_A)
print("\nTrace of Matrix A:", trace_A)

# Practice Problem 2: Find the trace of a 5×5 identity matrix
identity_matrix = np.identity(5)
trace_identity = np.trace(identity_matrix)
print("\nTrace of 5x5 Identity Matrix:", trace_identity)

# Section 3: Determinant using the Cofactor Method

# Example: Determinant using NumPy
det_A = np.linalg.det(matrix_A)
print("\nDeterminant of Matrix A:", det_A)

# Manual Cofactor Method for a 2x2 matrix
matrix_C = np.array([[4, 6], [3, 8]])
det_C = (matrix_C[0, 0] * matrix_C[1, 1]) - (matrix_C[0, 1] * matrix_C[1, 0])
print("\nDeterminant of Matrix C:", det_C)

# Practice Problem 3: Compute determinant of a 3×3 matrix using NumPy
matrix_B = np.array([[2, 4, 3],
                     [1, 5, 7],
                     [6, 8, 9]])
det_B = np.linalg.det(matrix_B)
print("\nDeterminant of Matrix B:", det_B)

# Section 4: Practice Problems

# Practice Problem 4: Generate a random 3×3 matrix and find its transpose and determinant
random_matrix_3x3 = np.random.randint(1, 10, (3, 3))
transpose_3x3 = random_matrix_3x3.T
det_random_3x3 = np.linalg.det(random_matrix_3x3)
print("\nRandom 3x3 Matrix:\n", random_matrix_3x3)
print("\nTranspose of Random 3x3 Matrix:\n", transpose_3x3)
print("\nDeterminant of Random 3x3 Matrix:", det_random_3x3)

# Practice Problem 5: Create and verify a symmetric 3×3 matrix
symmetric_matrix = np.array([[2, 1, 1],
                              [1, 2, 1],
                              [1, 1, 2]])
is_symmetric_matrix = (symmetric_matrix == symmetric_matrix.T).all()
print("\nSymmetric Matrix:\n", symmetric_matrix)
print("\nIs the matrix symmetric? ", is_symmetric_matrix)
